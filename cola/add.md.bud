## Add

There are various methods how to get {{ project.name }} into your project.
One common denominator is that you will
`#include <{{ project.repo }}/{{ project.repo }}.h>` in your sources and link
with `-l{{ project.repo }}`.


### Add as a dependency with mulle-sde

Use [mulle-sde](//github.com/mulle-sde) to add {{ project.repo }} to your project:

``` sh
mulle-sde add {{ project.domain }}:{{ project.user }}/{{ project.repo }}
```

This library does not include [mulle-atinit](//github.com/mulle-core/mulle-atinit)
and [mulle-atexit](//github.com/mulle-core/mulle-atexit) and
[mulle-testallocator](//github.com/mulle-core/mulle-testallocator). If you
add these libraries, it is important that mulle-core is added before them.


{% if not config.skipClibAdd %}

To only add the sources of {{ project.repo }} with dependency
sources use [clib](https://github.com/clibs/clib):


### Add sources to your project with clib

``` sh
clib install --out src/{{ project.user }} {{ project.user }}/{{ project.repo }}
```

Add `-isystem src/{{ project.user }}` to your `CFLAGS` and compile all the
sources that were downloaded with your project. (In **cmake** add
`include_directories( BEFORE SYSTEM src/{{ project.user }})` to your `CMakeLists.txt`
file).

{% endif %}


### Add as subproject with cmake and git

``` bash
git submodule add https://github.com/{{ project.user }}/{{ project.repo }}.git stash/{{ project.repo }}
git submodule update --init --recursive
```

Add this to your `CMakeLists.txt`:

``` cmake
add_subdirectory( stash/{{ project.repo }})
target_link_libraries( ${PROJECT_NAME} PRIVATE {{ project.repo }})
```

